-- PlayX
-- Copyright (c) 2009 sk89q <http://www.sk89q.com>
-- 
-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 2 of the License, or
-- (at your option) any later version.
-- 
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
-- 
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
-- 
-- $Id$

AddCSLuaFile("shared.lua")
AddCSLuaFile("cl_init.lua")

include("shared.lua")

resource.AddFile("materials/vgui/entities/gmod_playx.vmt")

ENT.Subscribed = {}

function ENT:Subscribe(ply)
    self.Subscribed[ply] = true
end

function ENT:Unsubscribe(ply)
    self.Subscribed[ply] = nil
end

--- Opens a media file to be played. Clients will be informed of the new
-- media. This is the typical function that you would call to play a
-- certain video.
-- @param provider Name of provider, leave blank to auto-detect
-- @param uri URI to play
-- @param start Time to start the video at, in seconds
-- @param lowFramerate Force the client side players to play at 1 FPS
-- @param useJW True to allow the use of the JW player, false for otherwise, nil to default true
-- @param noTimeout True to not check the length of the video (for auto-close)
-- @return The result generated by a provider, or nil and the error message
function ENT:OpenMedia(provider, uri, start, lowFramerate, useJW, noTimeout)
    -- Accept a wide variety of argument values
    local provider = provider or ""
    local uri = uri or Error("Missing required 'uri' argument")
    local start = start or 0
    local lowFramerate = lowFramerate or false
    local useJW = useJW and PlayX.IsUsingJW() or false
    local noTimeout = noTimeout or false
    
    local result -- Will hold the result from the provider
    
     -- Provider specified
    if provider ~= "" then
        local p = PlayX.GetProvider(provider)
        if not p then
            return false, "No provider by name of '" .. provider .. "'"
        end
        
        local resolvedURI = p.Detect(uri)
        result = p.GetPlayer(resolvedURI and resolvedURI or uri, useJW)
        
        if not result then
            return false, "Provider '" .. provider .. "' did not recognize the media URI"
        end
    -- Auto-detect provider
    else
        for id, p in pairs(PlayX.GetProviders()) do
            local resolvedURI = p.Detect(uri)
            
            if resolvedURI then
                provider = id
                result = p.GetPlayer(resolvedURI, useJW)
                break
            end
        end
        
        if not result then
            return false, "No provider was auto-detected"
        end
    end
    
    self:BeginMedia(result.Handler, result.URI, start, result.ResumeSupported,
                    lowFramerate, result.HandlerArgs)
    
    self:UpdateMetadata({
        ["Provider"] = provider,
    })
    
    if result.MetadataFunc then
        Msg(Format("PlayX: Metadata function available via provider %s\n", provider))
        result.MetadataFunc(function(data)
            Msg(Format("PlayX: Received metadata via provider %s\n", provider)) 
            PlayX.UpdateMetadata(data)
        end, function(err)
            Msg(Format("PlayX: Metadata failed via provider %s: %s\n", provider, err))
        end)
    end
end

--- Begins a piece of media and informs clients about it. This allows you
-- to skip the provider detection code and force a handler and URI.
-- @param handler
-- @param uri
-- @param start
-- @param resumeSupported
-- @param lowFramerate
-- @param length Length of the media in seconds, can be nil
-- @param handlerArgs Arguments for the handler, can be nil
-- @Param provider Used for wire outputs & metadata, optional
-- @Param identifier Identifies video URL/etc, used for wire outputs & metadata, optional
-- @Param title Used for wire outputs & metadata, optional
function ENT:BeginMedia(handler, uri, start, resumeSupported, lowFramerate, handlerArgs)
    timer.Stop("PlayXMediaExpire")
    timer.Stop("PlayXAdminTimeout")
    PlayX.LastOpenTime = CurTime()
    
    print(string.format("PlayX: Beginning media %s with handler %s, start at %ss",
                        uri, handler, start))
    
    if not handlerArgs then
        handlerArgs = {}
    end
    
    PlayX.CurrentMedia = {
        ["Handler"] = handler,
        ["URI"] = uri,
        ["StartAt"] = start,
        ["StartTime"] = CurTime() - start,
        ["ResumeSupported"] = resumeSupported,
        ["LowFramerate"] = lowFramerate,
        ["StopTime"] = nil,
        ["HandlerArgs"] = handlerArgs,
        -- Filled by metadata functions
        ["Provider"] = nil,
        -- Filled by metadata functions from provider
        ["URL"] = nil,
        ["Title"] = nil,
        ["Description"] = nil,
        ["Length"] = nil,
        ["Tags"] = nil,
        ["DatePublished"] = nil,
        ["DateModified"] = nil,
        ["Submitter"] = nil,
        ["SubmitterURL"] = nil,
        ["SubmitterAvatar"] = nil,
        ["NumFaves"] = nil,
        ["NumViews"] = nil,
        ["NumComments"] = nil,
        ["RatingNorm"] = nil,
        ["NumRatings"] = nil,
        ["Thumbnail"] = nil,
        ["Width"] = nil,
        ["Height"] = nil,
        ["IsLive"] = nil,
        ["ViewerCount"] = nil,
    }
    
    hook.Call("PlayXMediaBegun", nil, {handler, uri, start, resumeSupported,
                                       lowFramerate, handlerArgs,
                                       PlayX.CurrentMedia})
    
    if length then
        PlayX.SetCurrentMediaLength(length)
    end
    
    PlayX.SendBeginDStream()
end

function ENT:Initialize()
    self.Entity:PhysicsInit(SOLID_VPHYSICS)
    self.Entity:SetMoveType(MOVETYPE_VPHYSICS)
    self.Entity:SetSolid(SOLID_VPHYSICS)
    self.Entity:DrawShadow(false)
    
    if WireAddon then
        self.Outputs = Wire_CreateOutputs(self.Entity, {
            "Provider [STRING]",
            "Handler [STRING]",
            "URI [STRING]",
            "Start",
            "ActualStartTime",
            "Length",
            "URL [STRING]",
            "Title [STRING]",
            "Description [STRING]",
            "Tags [ARRAY]",
            "DatePublished",
            "DateModified",
            "Submitter [STRING]",
            "SubmitterURL [STRING]",
            "SubmitterAvatar [STRING]",
            "Faved",
            "Views",
            "Comments",
            "NormalizedRating",
            "RatingCount",
            "Thumbnail [STRING]",
            "Width",
            "Height",
            "IsLive",
            "ViewerCount",
        })
        
        self:ClearWireOutputs()
    end
end

function ENT:SpawnFunction(ply, tr)
    PlayX.SendSpawnDialogUMsg(ply)
end

function ENT:OnRemove()
    PlayX.CloseMedia()
end

function ENT:ClearWireOutputs()
    if WireAddon then
        Wire_TriggerOutput(self.Entity, "Provider", "")
        Wire_TriggerOutput(self.Entity, "Handler", "")
        Wire_TriggerOutput(self.Entity, "URI", "")
        Wire_TriggerOutput(self.Entity, "Start", -1)
        Wire_TriggerOutput(self.Entity, "ActualStartTime", -1)
        Wire_TriggerOutput(self.Entity, "Length", -1)
        Wire_TriggerOutput(self.Entity, "URL", "")
        Wire_TriggerOutput(self.Entity, "Title", "")
        Wire_TriggerOutput(self.Entity, "Description", "")
        Wire_TriggerOutput(self.Entity, "Tags", {})
        Wire_TriggerOutput(self.Entity, "DatePublished", -1)
        Wire_TriggerOutput(self.Entity, "DateModified", -1)
        Wire_TriggerOutput(self.Entity, "Submitter", "")
        Wire_TriggerOutput(self.Entity, "SubmitterURL", "")
        Wire_TriggerOutput(self.Entity, "SubmitterAvatar", "")
        Wire_TriggerOutput(self.Entity, "Faved", -1)
        Wire_TriggerOutput(self.Entity, "Views", -1)
        Wire_TriggerOutput(self.Entity, "Comments", -1)
        Wire_TriggerOutput(self.Entity, "NormalizedRating", -1)
        Wire_TriggerOutput(self.Entity, "RatingCount", -1)
        Wire_TriggerOutput(self.Entity, "Thumbnail", "")
        Wire_TriggerOutput(self.Entity, "Width", -1)
        Wire_TriggerOutput(self.Entity, "Height", -1)
        Wire_TriggerOutput(self.Entity, "IsLive", -1)
        Wire_TriggerOutput(self.Entity, "ViewerCount", -1)
    end
end

function ENT:SetWireMetadata(data)
    if WireAddon then
        Wire_TriggerOutput(self.Entity, "Provider", data.Provider and data.Provider or "")
        Wire_TriggerOutput(self.Entity, "Handler", data.Handler)
        Wire_TriggerOutput(self.Entity, "URI", data.URI)
        Wire_TriggerOutput(self.Entity, "Start", data.StartAt)
        Wire_TriggerOutput(self.Entity, "ActualStartTime", data.StartTime + data.StartAt)
        Wire_TriggerOutput(self.Entity, "Length", data.Length and data.Length or -1)
        Wire_TriggerOutput(self.Entity, "URL", data.URL and data.URL or "")
        Wire_TriggerOutput(self.Entity, "Title", data.Title and data.Title or "")
        Wire_TriggerOutput(self.Entity, "Description", data.Description and data.Description or "")
        Wire_TriggerOutput(self.Entity, "Tags", data.Tags and data.Tags or {})
        Wire_TriggerOutput(self.Entity, "DatePublished", data.DatePublished and data.DatePublished or -1)
        Wire_TriggerOutput(self.Entity, "DateModified", data.DateModified and data.DateModified or -1)
        Wire_TriggerOutput(self.Entity, "Submitter", data.Submitter and data.Submitter or "")
        Wire_TriggerOutput(self.Entity, "SubmitterURL", data.SubmitterURL and data.SubmitterURL or "")
        Wire_TriggerOutput(self.Entity, "SubmitterAvatar", data.SubmitterAvatar and data.SubmitterAvatar or "")
        Wire_TriggerOutput(self.Entity, "Faved", data.NumFaves and data.NumFaves or -1)
        Wire_TriggerOutput(self.Entity, "Views", data.NumViews and data.NumViews or -1)
        Wire_TriggerOutput(self.Entity, "Comments", data.NumComments and data.NumComments or -1)
        Wire_TriggerOutput(self.Entity, "NormalizedRating", data.RatingNorm and data.RatingNorm or -1)
        Wire_TriggerOutput(self.Entity, "RatingCount", data.NumRatings and data.NumRatings or -1)
        Wire_TriggerOutput(self.Entity, "Thumbnail", data.Thumbnail and data.Thumbnail or "")
        Wire_TriggerOutput(self.Entity, "Width", data.Width and data.Width or -1)
        Wire_TriggerOutput(self.Entity, "Height", data.Height and data.Height or -1)
        Wire_TriggerOutput(self.Entity, "IsLive", data.IsLive and data.IsLive or -1)
        Wire_TriggerOutput(self.Entity, "ViewerCount", data.ViewerCount and data.ViewerCount or -1)
    end
end

local function PlayXEntityDuplicator(ply, model, pos, ang)
    if PlayX.PlayerExists() then
        return nil
    end
    
    if not PlayX.IsPermitted(ply) then
        return nil
    end
    
    local ent = ents.Create("gmod_playx")
    ent:SetModel(model)
    ent:SetPos(pos)
    ent:SetAngles(ang)
    ent:Spawn()
    ent:Activate()
    
    ply:AddCleanup("gmod_playx", ent)

    return ent
end

duplicator.RegisterEntityClass("gmod_playx", PlayXEntityDuplicator, "Model", "Pos", "Ang")